<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.kang.mybaits.test4.MyBaits">
	
<!-- 	<select id="getClases" parameterType="int" resultMap="ClassMap"   > -->
<!-- 	select * from teacher t,class c where t.t_id=c.teacher_id and c.c_id = #{id} -->
<!-- 	</select> -->
<!-- 	<resultMap type="com.kang.mybaits.bean.Classes" id="ClassMap"> -->
<!-- 		<id property="id"  column="c_id"/> -->
<!-- 		<result property="name" column="c_name"/> -->
<!-- 		<association property="teacher" javaType="com.kang.mybaits.bean.Teacher"> -->
<!-- 			<id property="id" column="t_id"/> -->
<!-- 			<result property="name"	 column="t_name"		/> -->
<!-- 		</association> -->
<!-- 	</resultMap> -->
<!-- 			方式二：嵌套查询：通过执行另外一个 SQL 映射语句来返回预期的复杂类型  -->
<!-- 			SELECT * FROM class WHERE c_id=1;  -->
<!-- 			SELECT * FROM teacher WHERE t_id=1   //1 是上一个查询得到的 teacher_id 的值 -->
	<select id="getClases2" parameterType="int" resultMap="ClassMap"   >
			SELECT * FROM class WHERE c_id=#{id}
	</select>
	<!-- 	此时通过给表列起别名的方式，让它的resultType指向对象 -->
	<!-- 	本质上是把查询出来的数据分发给表的映射实体类 -->
		<select id="getClases-min" parameterType="int" resultMap="getClases-Min-Map"  >
			SELECT  t_id ,t_name  FROM teacher WHERE t_id=#{id}
	</select>
	<resultMap type="com.kang.mybaits.bean.Classes" id="ClassMap">
		<id property="id"  column="c_id"/>
		<result property="name" column="c_name"/>
		<association property="teacher"  column="teacher_id" select="getClases-min" >
		</association>
	</resultMap>
	<resultMap type="com.kang.mybaits.bean.Teacher" id="getClases-Min-Map">
		<id property="id" column="t_id"/>
		<result property="name" column="t_name"/>
	</resultMap>
	
</mapper>